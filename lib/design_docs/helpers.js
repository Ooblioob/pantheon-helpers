// Generated by IcedCoffeeScript 1.8.0-c
(function() {
  var err, h, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  try {
    _ = require('underscore');
  } catch (_error) {
    err = _error;
    _ = require('lib/underscore');
  }

  h = {};

  h.mk_objs = function(obj, path_array, val) {
    var path_part;
    if (val == null) {
      val = {};
    }

    /*
    make a set of nested object.
    
    obj = {'x': 1}
    mk_objs(obj, ['a', 'b'], ['1'])
     * returns []
     * obj now equals {'x': 1, 'a': {'b': ['1']}}
    
    return the val
     */
    if (!path_array.length) {
      return obj;
    }
    path_part = path_array.shift();
    if (!obj[path_part]) {
      if (path_array.length) {
        obj[path_part] = {};
      } else {
        obj[path_part] = val;
      }
    } else if (path_array.length && _.isArray(obj[path_part])) {
      throw new Error('item at "' + path_part + '" must be an Object, but it is an Array.');
    } else if (path_array.length && !_.isObject(obj[path_part])) {
      throw new Error('item at "' + path_part + '" must be an Object, but it is a ' + typeof obj[path_part] + '.');
    }
    return h.mk_objs(obj[path_part], path_array, val);
  };

  h.remove_in_place = function(container, value) {
    var i;
    if (__indexOf.call(container, value) >= 0) {
      i = container.indexOf(value);
      return container.splice(i, 1);
    }
  };

  h.insert_in_place = function(container, value) {
    if (__indexOf.call(container, value) < 0) {
      return container.push(value);
    }
  };

  module.exports = h;

}).call(this);
