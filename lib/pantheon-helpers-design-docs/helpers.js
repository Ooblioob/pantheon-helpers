// Generated by CoffeeScript 1.9.1
(function() {
  var _, getRow, h, send, shared, start;

  _ = require('underscore');

  try {
    shared = require('lib/shared');
  } catch (_error) {
    shared = {};
    start = 'start';
    getRow = 'getRow';
    send = 'send';
  }

  h = {};

  h.shared = shared;

  h.JSONResponse = function(doc) {

    /*
    format a proper JSON response for the document
     */
    return {
      headers: {
        'Content-Type': "application/json"
      },
      body: JSON.stringify(doc)
    };
  };

  h.sendNakedList = function(getRow, start, send, rowTransform) {

    /*
    lazily send a JSON serialized list of rows,
    each having been transformed by rowTransform.
    If rowTransform throws the string `"skip"`,
    the row will be skipped.
     */
    var e, first, row, transformedRow;
    start({
      headers: {
        'Content-Type': 'application/json'
      }
    });
    first = true;
    send('[');
    while ((row = getRow())) {
      try {
        transformedRow = rowTransform(row);
      } catch (_error) {
        e = _error;
        if (e === 'skip') {
          continue;
        } else {
          throw e;
        }
      }
      if (first) {
        first = false;
      } else {
        send(',');
      }
      send(JSON.stringify(transformedRow));
    }
    return send(']');
  };

  h.listGenerators = {
    get_prepped_of_type: function(docType) {

      /*
      returns a list function
      must call with {get_docs: true}
      only return documents of the specified type
      run all document through the appropriate prepDoc function defined in shared.prepDocFns
       */
      return function(header, req) {
        return h.sendNakedList(getRow, start, send, function(row) {
          var doc;
          doc = row.doc;
          if (h.shared.getDocType(doc) !== docType) {
            throw 'skip';
          }
          return h.shared.prepDoc(doc);
        });
      };
    }
  };

  h.lists = {
    get_prepped: function(header, req) {

      /*
      must call with {get_docs: true}
      run all document through the appropriate prepDoc function defined in shared.prepDocFns
       */
      return h.sendNakedList(getRow, start, send, function(row) {
        return h.shared.prepDoc(row.doc);
      });
    },
    get_values: function(header, req) {

      /*
      return only the value from the passed view's map function
       */
      return h.sendNakedList(getRow, start, send, function(row) {
        return row.value;
      });
    }
  };

  h.shows = {
    get_prepped: function(doc, req) {

      /*
      return the document after running through shared.prepDoc
       */
      var preppedDoc;
      preppedDoc = h.shared.prepDoc(doc);
      return h.JSONResponse(preppedDoc);
    }
  };

  module.exports = h;

}).call(this);
